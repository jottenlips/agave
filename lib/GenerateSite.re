let readf: string => string =
  path =>
    switch (Bos.OS.File.read(Fpath.v(path))) {
    | Ok(a) => a
    | _ => ""
    };

let writef: (string, string) => unit =
  (path, content) => Bos.OS.File.write(Fpath.v(path), content) |> ignore;

let regexmd = Str.regexp("\\b.md\\b");
let is_markdown: string => bool =
  name =>
    try(
      switch (Str.search_forward(regexmd, name, 0)) {
      | _ => true
      }
    ) {
    | Not_found => false
    };
let removemd: string => string =
  filename => Str.replace_first(regexmd, "", filename);

let regexmarkdown = Str.regexp("<!-- MARKDOWN -->");
let addmarkdown: (string, string) => string =
  (template, content) => Str.replace_first(regexmarkdown, content, template);

exception NotADirectory(string);

let mkdir: string => unit =
  dir =>
    try(
      if (!Sys.is_directory(dir)) {
        raise(NotADirectory(dir ++ " Is not a directory."));
      }
    ) {
    | _ => Bos.OS.Dir.create(~path=true, Fpath.v(dir)) |> ignore
    };

let buildoutdir: (string, string) => string =
  (filename, dirname) =>
    switch (filename) {
    | "index.md" => "./" ++ dirname
    | _ => "./" ++ dirname ++ "/" ++ removemd(filename)
    };

let makedirectories = () => {
  let inputdir =
    try(Sys.argv[1]) {
    | _ => "markdown"
    };

  let outputdir =
    try(Sys.argv[2]) {
    | _ => "public"
    };
  mkdir(outputdir);

  [|inputdir, outputdir|];
};

let defaulthtml = {|<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8" />
      <title>Agave Site</title>
      <meta name="description" content="Site generated by Agave" />
      <meta name="author" content="you" />
      <link rel="stylesheet" href="stylesheet.css" />
    </head>
    <body>
      <!-- MARKDOWN -->
    </body>
  </html>
  |};

let rec buildfiletree: (string, string, string) => string =
  (inputdir, outputdir, basehtml) => {
    let markdownfiles =
      Sys.readdir("./" ++ inputdir)
      |> Array.to_list
      |> List.map(x => {
           let currentfile = inputdir ++ "/" ++ x;
           Sys.is_directory(currentfile)
             ? mkdir("./" ++ outputdir)
               |> (
                 () => {
                   let nextoutputdir = "./" ++ outputdir ++ "/" ++ x;
                   mkdir(nextoutputdir);
                   buildfiletree(
                     "./" ++ inputdir ++ "/" ++ x,
                     nextoutputdir,
                     basehtml,
                   );
                 }
               )
             : x;
         })
      |> List.filter(x => is_markdown(x));

    markdownfiles
    |> List.map(file => mkdir(buildoutdir(file, outputdir)))
    |> ignore;

    markdownfiles
    |> List.fold_left(
         (a, b) =>
           readf("./" ++ inputdir ++ "/" ++ b)
           |> Omd.of_string
           |> Omd.to_html(~pindent=true)
           |> addmarkdown(basehtml)
           |> writef(buildoutdir(b, outputdir) ++ "/index.html")
           |> (
             () =>
               Pastel.(
                 <Pastel color=Green>
                   {"./"
                    ++ inputdir
                    ++ "/"
                    ++ b
                    ++ " has been added to "
                    ++ outputdir}
                 </Pastel>
               )
               ++ "\n"
               ++ a
           ),
         "☀️ Done!",
       );
  };

let agave = () => {
  let dirs = makedirectories();

  let basehtml =
    switch (readf(dirs[0] ++ "/base.html")) {
    | "" => defaulthtml
    | x => x
    };

  buildfiletree(dirs[0], dirs[1], basehtml);
};